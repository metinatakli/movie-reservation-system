openapi: 3.0.3
info:
  title: Movie Reservation System
  version: 0.0.1
servers:
  - url: /v1
tags:
  - name: health
    description: Related to server's health
  - name: auth
    description: Related to user authentication and registration
  - name: user
    description: >
      Operations related to user management, including viewing and updating
      user profiles, managing user settings, and handling user-specific
      actions.
  - name: movie
    description: Operations related to viewing movies, movie details, showtimes.
  - name: showtimes
    description: Operations related to movie showtimes, including schedules and seat availability.
paths:
  /healthcheck:
    get:
      tags:
        - health
      summary: Get the server status
      operationId: getHealth
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    post:
      tags:
        - auth
      summary: Register
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '202':
          description: Successful operation, activation mail is sent to user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/activation:
    put:
      tags:
       - auth
      summary: User activation
      operationId: activateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActivationRequest'
        required: true
      responses:
        '200':
          description: User is successfully activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivationResponse'
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Token sent by user doesn't exist or has expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Edit conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /sessions:
    post:
      tags:
       - auth
      summary: User login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: User is already logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyLoggedInResponse'
        '204':
          description: User is successfully logged in
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - auth
      summary: User logout
      operationId: logout
      responses:
        '204':
          description: User is successfully logged out
        '404':
          description: Guest user tries to logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me:
    get:
      tags:
       - user
      summary: Retrieve user profile
      operationId: getCurrentUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserResponse'
        '404':
          description: Guest user tries to reach user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - user
      summary: Update user profile
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Edit conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '404':
          description: Guest user tries to reach to the endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me/deletion-request:
    post:
      tags:
        - user
      summary: Initiates the user deletion flow
      operationId: initiateUserDeletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateUserDeletionRequest'
      responses:
        '202':
          description: Email is sent to user for user deletion
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Guest user tries to reach to the endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - user
      summary: Completes the user deletion flow
      operationId: completeUserDeletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteUserDeletionRequest'
      responses:
        '204':
          description: User is deleted successfully
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: User does not have permission to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Token sent by user doesn't exist or has expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Edit conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /movies:
    get:
      tags:
        - movie
      summary: Get movies
      operationId: getMovies
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          x-oapi-codegen-extra-tags:
            validate: "omitempty,min=1,max=500000"
          description: Page number (starting from 1)
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          x-oapi-codegen-extra-tags:
            validate: "omitempty,min=1,max=100"
          description: Number of results per page (max 100)
        - in: query
          name: term
          schema:
            type: string
          x-oapi-codegen-extra-tags:
            validate: "omitempty,max=50"
          description: Search term for movie title or description
        - in: query
          name: sort
          schema:
            type: string
            default: "id"
          x-oapi-codegen-extra-tags:
            validate: "omitempty,oneof=id -id release_date -release_date title -title duration -duration"
          description: Sorting field (e.g., `release_date`). Use `-` prefix for descending order (e.g., `-release_date`).
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '422':
          description: Invalid query fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /movies/{id}:
    get:
      tags:
        - movie
      operationId: showMovieDetails
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetailsResponse'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid movie id format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /movies/{id}/showtimes:
    get:
      tags:
        - movie
      operationId: getMovieShowtimes
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
        - in: query
          name: latitude
          schema:
            type: number
            format: double
          required: true
          x-oapi-codegen-extra-tags:
            validate: "required,latitude"
        - in: query
          name: longitude
          schema:
            type: number
            format: double
          required: true
          x-oapi-codegen-extra-tags:
            validate: "required,longitude"
        - in: query
          name: date
          schema:
            type: string
          required: true
          x-oapi-codegen-extra-tags:
            validate: "required,datetime=2006-01-02"
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          x-oapi-codegen-extra-tags:
            validate: "omitempty,min=1,max=500000"
          description: Page number (starting from 1)
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          x-oapi-codegen-extra-tags:
            validate: "omitempty,min=1,max=100"
          description: Number of results per page (max 100)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieShowtimesResponse'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid movie id format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /showtimes/{showtime_id}/seat-map:
    get:
      tags:
        - showtimes
      operationId: getSeatMapByShowtime
      parameters:
        - in: path
          name: showtime_id
          schema:
            type: integer
            minimum: 1
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeatMapResponse'
        '404':
          description: Showtime not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /showtimes/{showtime_id}/cart:
    post:
      tags:
        - showtimes
      operationId: createCartHandler
      parameters:
        - in: path
          name: showtime_id
          schema:
            type: integer
            minimum: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCartRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '404':
          description: Showtime or seatId not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Seats are already reserved by another user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid seatIdList format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - showtimes
      operationId: deleteCartHandler
      summary: Deletes the cart associated with the current session for the given showtime
      parameters:
        - in: path
          name: showtime_id
          schema:
            type: integer
            minimum: 1
          required: true
          description: The ID of the showtime for which the cart is being deleted
      responses:
        '204':
          description: Cart deleted successfully
        '404':
          description: Cart not found for the current session or given showtime
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - message
        - timestamp
        - requestId
      properties:
        message:
          type: string
          description: A human-readable description of the error.
          example: "Resource not found"
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of when the error occurred.
          example: "2024-12-01T14:32:28Z"
        requestId:
          type: string
          description: A unique identifier for the request to help with tracing errors.
          example: "abc123xyz789"
    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - validationErrors
          properties:
            validationErrors:
              type: array
              description: A list of validation errors that occurred.
              items:
                $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      required:
        - field
        - issue
      properties:
        field:
          type: string
          description: The name of the invalid field.
          example: "email"
        issue:
          type: string
          description: A description of what is wrong with the field.
          example: "must be a valid email address"
    HealthcheckResponse:
      type: object
      required:
        - status
        - systemInfo
      properties:
        status:
          type: string
          description: "The current status of the system."
        systemInfo:
          $ref: "#/components/schemas/SystemInfo"
          description: "Detailed information about the system, including environment and version."
    SystemInfo:
      type: object
      required:
        - environment
        - version
      properties:
        environment:
          type: string
          description: "The deployment environment of the system, e.g., 'prod', 'staging', or 'dev'."
        version:
          type: string
          description: "The current version of the application or API."
    RegisterRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - birthDate
        - gender
      properties:
        firstName:
          type: string
          description: "The user's first name. Must contain only alphabetic characters and be between 2 and 50 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "required,min=2,max=50,alpha"
        lastName:
          type: string
          description: "The user's last name. Must contain only alphabetic characters and be between 2 and 50 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "required,min=2,max=50,alpha"
        email:
          type: string
          description: "The user's email address. Must be a valid email format and cannot exceed 254 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "required,email,max=254"
        password:
          type: string
          description: "The user's password. Must be at least 8 characters long and at most 25 characters long. It must contain only alphanumeric characters and special symbols (e.g., !@#$%^&*)."
          x-oapi-codegen-extra-tags:
            validate: "required,password"
        birthDate:
          type: string
          format: date
          description: "The user's date of birth. Must be provided in ISO 8601 format (YYYY-MM-DD). The user must be at least 15 years old."
          x-oapi-codegen-extra-tags:
            validate: "required,age_check"
        gender:
          # https://github.com/oapi-codegen/oapi-codegen/issues/863
          allOf:
            - $ref: "#/components/schemas/Gender"
          x-oapi-codegen-extra-tags:
            validate: "required,gender"
    UserResponse:
      type: object
      required:
        - id
        - createdAt
        - firstName
        - lastName
        - email
        - birthDate
        - gender
        - activated
        - version
      properties:
        id:
          type: integer
          description: "The unique identifier for the user."
        createdAt:
          type: string
          format: date-time
          description: "The timestamp when the user was created."
        firstName:
          type: string
          description: "The user's first name."
        lastName:
          type: string
          description: "The user's last name."
        email:
          type: string
          description: "The user's email address."
        birthDate:
          type: string
          format: date
          description: "The user's date of birth."
        gender:
          $ref: "#/components/schemas/Gender"
          description: "The user's gender."
        activated:
          type: boolean
          description: "Indicates whether the user's account is activated."
        version:
          type: integer
          description: "The user's current version"
    Gender:
      type: string
      enum:
        - F
        - M
        - OTHER
      x-oapi-codegen-extra-tags:
        validate: "gender"
    UserActivationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: "Token sent to users' email in order to activate their account"
          x-oapi-codegen-extra-tags:
            validate: "required,len=43,base64rawurl"
    UserActivationResponse:
      type: object
      required:
        - activated
      properties:
        activated:
          type: boolean
          description: "Indicates whether the user's account is successfully activated."
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: "The user's email address. Must be a valid email format and cannot exceed 254 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "required,email,max=254"
        password:
          type: string
          description: "The user's password. Must comply with password requirements."
          x-oapi-codegen-extra-tags:
            validate: "required,password"
    AlreadyLoggedInResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: "The user's first name. Must contain only alphabetic characters and be between 2 and 50 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "omitempty,min=2,max=50,alpha"
        lastName:
          type: string
          description: "The user's last name. Must contain only alphabetic characters and be between 2 and 50 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "omitempty,min=2,max=50,alpha"
        birthDate:
          type: string
          format: date
          description: "The user's date of birth. Must be provided in ISO 8601 format (YYYY-MM-DD). The user must be at least 15 years old."
          x-oapi-codegen-extra-tags:
            validate: "omitempty,age_check"
        gender:
          # https://github.com/oapi-codegen/oapi-codegen/issues/863
          allOf:
            - $ref: "#/components/schemas/Gender"
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gender"
    InitiateUserDeletionRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: "The user's password. Must be at least 8 characters long and at most 25 characters long. It must contain only alphanumeric characters and special symbols (e.g., !@#$%^&*)."
          x-oapi-codegen-extra-tags:
            validate: "required,password"
    CompleteUserDeletionRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: "Token sent to users' email in order to activate their account"
          x-oapi-codegen-extra-tags:
            validate: "required,len=43,base64rawurl"
    MovieListResponse:
      type: object
      required:
        - movies
      properties:
        movies:
          type: array
          items:
            $ref: '#/components/schemas/MovieSummary'
        metadata:
          $ref: '#/components/schemas/Metadata'
    MovieSummary:
      type: object
      required:
        - id
        - name
        - poster_url
        - release_date
        - description
        - status
      properties:
        id:
          type: integer
        name:
          type: string
        poster_url:
          type: string
          format: uri
        release_date:
          type: string
          format: date
          description: The official release date of the movie
        description:
          type: string
          description: A short summary of the movie
        status:
          $ref: '#/components/schemas/MovieStatus'
    MovieStatus:
      type: string
      enum:
        - NOW_SHOWING
        - COMING_SOON
    Metadata:
      type: object
      required:
        - currentPage
        - pageSize
        - firstPage
        - lastPage
        - totalRecords
      properties:
        currentPage:
          type: integer
        pageSize:
          type: integer
        firstPage:
          type: integer
        lastPage:
          type: integer
        totalRecords:
          type: integer
    MovieDetailsResponse:
      type: object
      required:
        - id
        - name
        - poster_url
        - release_date
        - description
        - runtime
        - genres
        - language
        - director
        - cast
      properties:
        id:
          type: integer
        name:
          type: string
        poster_url:
          type: string
          format: uri
        release_date:
          type: string
          format: date
          description: The official release date of the movie
        description:
          type: string
          description: A short summary of the movie
        runtime:
          type: integer
        genres:
          type: array
          items:
            type: string
        language:
          type: string
        director:
          type: string
        cast:
          type: array
          items:
            type: string
        rating:
          type: number
          format: float

    MovieShowtimesResponse:
      type: object
      required:
        - date
        - theaters
      properties:
        date:
          type: string
          format: date
          description: The date for which showtimes are being listed.
        theaters:
          type: array
          items:
            $ref: '#/components/schemas/TheaterShowtimes'
          description: A list of theaters showing the movie on the specified date.
        metadata:
          $ref: '#/components/schemas/Metadata'

    TheaterShowtimes:
      type: object
      required:
        - id
        - name
        - address
        - city
        - district
        - distance
        - amenities
        - halls
      properties:
        id:
          type: integer
          description: The unique identifier for the theater.
        name:
          type: string
          description: The name of the theater.
        address:
          type: string
          description: The full address of the theater.
        city:
          type: string
          description: The city where the theater is located.
        district:
          type: string
          description: The district or neighborhood where the theater is located.
        distance:
          type: number
          format: double
          description: The distance of the theater from the user's location, in kilometers.
        amenities:
          type: array
          items:
            $ref: '#/components/schemas/Amenity'
          description: The list of amenities available at the theater (e.g., IMAX, Dolby Atmos).
        halls:
          type: array
          items:
            $ref: '#/components/schemas/Hall'
          description: The list of halls available in the theater.

    Amenity:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: integer
          description: The unique identifier for the amenity.
        name:
          type: string
          description: The name of the amenity (e.g., "Recliner Seats", "Dolby Atmos").
        description:
          type: string
          description: A brief description of the amenity.

    Hall:
      type: object
      required:
        - id
        - name
        - amenities
        - showtimes
      properties:
        id:
          type: integer
          description: The unique identifier for the hall.
        name:
          type: string
          description: The name of the hall.
        amenities:
          type: array
          items:
            $ref: '#/components/schemas/Amenity'
          description: A list of amenities available in the hall.
        showtimes:
          type: array
          items:
            $ref: '#/components/schemas/Showtime'
          description: A list of showtimes available in this hall.

    Showtime:
      type: object
      required:
        - id
        - startTime
        - startDateTime
        - price
        - status
      properties:
        id:
          type: integer
          description: The unique identifier for the showtime.
        startTime:
          type: string
          description: The start time of the movie in HH:mm format.
        startDateTime:
          type: string
          format: date-time
          description: The full start date and time of the movie in ISO 8601 format.
        price:
          type: number
          description: The base price of the showtime.
        status:
          $ref: '#/components/schemas/ShowtimeStatus'
          description: The availability status of the showtime.

    ShowtimeStatus:
      type: string
      enum:
        - AVAILABLE
        - SOLD_OUT
        - EXPIRED
      description: The current status of the showtime.

    SeatMapResponse:
      type: object
      required:
        - theaterId
        - theaterName
        - hallId
        - showtimeId
        - seatRows
      properties:
        theaterId:
          type: integer
          description: Unique identifier for the theater.
        theaterName:
          type: string
          description: The name of the theater."
        hallId:
          type: integer
          description: Unique identifier for the hall within the theater.
        showtimeId:
          type: integer
          description: Unique identifier for the showtime.
        seatRows:
          type: array
          description: An array representing the rows of seats in the hall.
          items:
            $ref: "#/components/schemas/SeatRow"
    
    SeatRow:
      type: object
      required:
        - row
        - seats
      properties:
        row:
          type: integer
          description: The row number in the hall.
        seats:
          type: array
          description: An array of individual seats in this row.
          items:
            $ref: "#/components/schemas/Seat"

    Seat:
      type: object
      required:
        - id
        - row
        - column
        - type
        - extraPrice
        - available
      properties:
        id:
          type: integer
          description: Unique identifier for the seat.
        row:
          type: integer
          description: The row number of the seat.
        column:
          type: integer
          description: The column number of the seat in the row.
        type:
          $ref: '#/components/schemas/SeatType'
          description: The type of seat (e.g., Standard, VIP, Recliner, Accessible).
        extraPrice:
          type: number
          description: The additional price for the seat, if any.
        available:
          type: boolean
          description: Indicates whether the seat is available for reservation.

    SeatType:
      type: string
      enum:
        - Standard
        - VIP
        - Recliner
        - Accessible

    CreateCartRequest:
      type: object
      required:
        - seatIdList
      properties:
        seatIdList:
          type: array
          items:
            type: integer
          x-oapi-codegen-extra-tags:
            validate: "required,min=1,max=8,dive,required,gt=0"
    
    CartResponse:
      type: object
      required:
        - cart
      properties:
        cart:
          $ref: '#/components/schemas/Cart'

    Cart:
      type: object
      required:
        - cartId
        - showtimeId
        - movieName
        - theaterName
        - hallName
        - showtimeDate
        - seats
        - holdTime
        - basePrice
        - totalPrice
      properties:
        cartId:
          type: string
          description: "A unique identifier for the cart."
        showtimeId:
          type: integer
          description: "The ID of the showtime the user is reserving seats for."
        movieName:
          type: string
          description: "The name of the movie the user is reserving seats for."
        theaterName:
          type: string
          description: "The name of the theater where showtime takes place"
        hallName:
          type: string
          description: "The name of the hall where showtime takes place"
        showtimeDate:
          type: string
          description: "The date of the showtime"
        seats:
          type: array
          items:
            $ref: '#/components/schemas/CartSeat'
          description: "A list of seats selected for the reservation."
        holdTime:
          type: integer
          description: "The time (in seconds) until the cart expires or the reservation is confirmed."
        basePrice:
          type: string
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
            name: Decimal
          description: "Showtime's base price"
        totalPrice:
          type: string
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
            name: Decimal
          description: "The total price for all the seats in the cart."

    CartSeat:
      type: object
      required:
        - id
        - row
        - column
        - type
        - price
      properties:
        id:
          type: integer
          description: "The unique identifier for the seat."
        row:
          type: integer
          description: "The row number of the seat in the hall."
        column:
          type: integer
          description: "The column number of the seat in the hall."
        type:
          $ref: '#/components/schemas/SeatType'
          description: "The type of the seat"
        price:
          type: string
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
            name: Decimal
          description: "The price of the seat."
    
