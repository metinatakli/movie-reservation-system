openapi: 3.0.3
info:
  title: Movie Reservation System
  version: 0.0.1
servers:
  - url: /v1
tags:
  - name: health
    description: Related to server's health
  - name: auth
    description: Related to user authentication and registration
  - name: user
    description: >
      Operations related to user management, including viewing and updating
      user profiles, managing user settings, and handling user-specific
      actions.
paths:
  /healthcheck:
    get:
      tags:
        - health
      summary: Get the server status
      operationId: getHealth
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    post:
      tags:
        - auth
      summary: Register
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '202':
          description: Successful operation, activation mail is sent to user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/activation:
    put:
      tags:
       - auth
      summary: User activation
      operationId: activateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActivationRequest'
        required: true
      responses:
        '200':
          description: User is successfully activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivationResponse'
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Token sent by user doesn't exist or has expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Edit conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /sessions:
    post:
      tags:
       - auth
      summary: User login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '204':
          description: User is successfully logged in
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - auth
      summary: User logout
      operationId: logout
      responses:
        '204':
          description: User is successfully logged out
        '404':
          description: Guest user tries to logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me:
    get:
      tags:
       - user
      summary: Retrieve user profile
      operationId: getCurrentUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserResponse'
        '404':
          description: Guest user tries to reach user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - user
      summary: Update user profile
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request body syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Edit conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid request fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '404':
          description: Guest user tries to reach to the endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - message
        - timestamp
        - requestId
      properties:
        message:
          type: string
          description: A human-readable description of the error.
          example: "Resource not found"
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of when the error occurred.
          example: "2024-12-01T14:32:28Z"
        requestId:
          type: string
          description: A unique identifier for the request to help with tracing errors.
          example: "abc123xyz789"
    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - validationErrors
          properties:
            validationErrors:
              type: array
              description: A list of validation errors that occurred.
              items:
                $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      required:
        - field
        - issue
      properties:
        field:
          type: string
          description: The name of the invalid field.
          example: "email"
        issue:
          type: string
          description: A description of what is wrong with the field.
          example: "must be a valid email address"
    HealthcheckResponse:
      type: object
      required:
        - status
        - systemInfo
      properties:
        status:
          type: string
          description: "The current status of the system."
        systemInfo:
          $ref: "#/components/schemas/SystemInfo"
          description: "Detailed information about the system, including environment and version."
    SystemInfo:
      type: object
      required:
        - environment
        - version
      properties:
        environment:
          type: string
          description: "The deployment environment of the system, e.g., 'prod', 'staging', or 'dev'."
        version:
          type: string
          description: "The current version of the application or API."
    RegisterRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - birthDate
        - gender
      properties:
        firstName:
          type: string
          description: "The user's first name. Must contain only alphabetic characters and be between 2 and 50 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "required,min=2,max=50,alpha"
        lastName:
          type: string
          description: "The user's last name. Must contain only alphabetic characters and be between 2 and 50 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "required,min=2,max=50,alpha"
        email:
          type: string
          description: "The user's email address. Must be a valid email format and cannot exceed 254 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "required,email,max=254"
        password:
          type: string
          description: "The user's password. Must be at least 8 characters long and at most 25 characters long. It must contain only alphanumeric characters and special symbols (e.g., !@#$%^&*)."
          x-oapi-codegen-extra-tags:
            validate: "required,password"
        birthDate:
          type: string
          format: date
          description: "The user's date of birth. Must be provided in ISO 8601 format (YYYY-MM-DD). The user must be at least 15 years old."
          x-oapi-codegen-extra-tags:
            validate: "required,age_check"
        gender:
          # https://github.com/oapi-codegen/oapi-codegen/issues/863
          allOf:
            - $ref: "#/components/schemas/Gender"
          x-oapi-codegen-extra-tags:
            validate: "required,gender"
    UserResponse:
      type: object
      required:
        - id
        - createdAt
        - firstName
        - lastName
        - email
        - birthDate
        - gender
        - activated
        - version
      properties:
        id:
          type: integer
          description: "The unique identifier for the user."
        createdAt:
          type: string
          format: date-time
          description: "The timestamp when the user was created."
        firstName:
          type: string
          description: "The user's first name."
        lastName:
          type: string
          description: "The user's last name."
        email:
          type: string
          description: "The user's email address."
        birthDate:
          type: string
          format: date
          description: "The user's date of birth."
        gender:
          $ref: "#/components/schemas/Gender"
          description: "The user's gender."
        activated:
          type: boolean
          description: "Indicates whether the user's account is activated."
        version:
          type: integer
          description: "The user's current version"
    Gender:
      type: string
      enum:
        - F
        - M
        - OTHER
      x-oapi-codegen-extra-tags:
        validate: "gender"
    UserActivationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: "Token sent to users' email in order to activate their account"
          x-oapi-codegen-extra-tags:
            validate: "required,len=43,base64rawurl"
    UserActivationResponse:
      type: object
      required:
        - activated
      properties:
        activated:
          type: boolean
          description: "Indicates whether the user's account is successfully activated."
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: "The user's email address. Must be a valid email format and cannot exceed 254 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "required,email,max=254"
        password:
          type: string
          description: "The user's password. Must comply with password requirements."
          x-oapi-codegen-extra-tags:
            validate: "required,password"
    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: "The user's first name. Must contain only alphabetic characters and be between 2 and 50 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "omitempty,min=2,max=50,alpha"
        lastName:
          type: string
          description: "The user's last name. Must contain only alphabetic characters and be between 2 and 50 characters in length."
          x-oapi-codegen-extra-tags:
            validate: "omitempty,min=2,max=50,alpha"
        birthDate:
          type: string
          format: date
          description: "The user's date of birth. Must be provided in ISO 8601 format (YYYY-MM-DD). The user must be at least 15 years old."
          x-oapi-codegen-extra-tags:
            validate: "omitempty,age_check"
        gender:
          # https://github.com/oapi-codegen/oapi-codegen/issues/863
          allOf:
            - $ref: "#/components/schemas/Gender"
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gender"