// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUzW7bOBB+FWJ2AV9kWbazu1ndcihaH4oWdnpp4QNDjSSmEsmQIydu4HcvSCq2FavN",
	"pSdbmuF8P/NRzyB0a7RCRQ7yZ3CixpaHv++s1XaNzmjl0L8wVhu0JDGUW3SOV6FQoBNWGpJaQQ43rO5a",
	"rqYWecHvGmRnZaZLRjUy9LNTSACfeGsahBzW6HRnBTKliZW6UwUkQHvja46sVBUcErD40KGjVTGG2yn5",
	"0CGTBSqSpUTLSm0DXn+MkWY1NoY9SqoZWS6kqiIZN2TD78R8sXza//jv+v8xHiRbdMRbc8ljtfnErv/N",
	"5uzY41U/1qhO0pkWorMWiyHqIltcTeeLaTa/nV/ly0W+uP4KCZTatpwgh4ITTv3YS0q9N9JiAfm343bO",
	"mZ67tz0O0Hf3KMhr+oC8oVrUKL7/eu2OOHXuUvVtjSxIUsRiz8uu3d4RtumYi7G0UqX2A/+2WEIOf81O",
	"kZz1eZxtTp2vpfaMBtPG5G0GYENVqHbSatWionFpBZpG732dnfUOJSYM0ypN2MRYXUwSNnHEK6mqScK0",
	"ZZMCd5NRF3ZoXUD6nad90wsiN6aRgsc7ZdnN51X6ZibORZ5QL63y52RvE0kKyfyodxLZGh3aXUSNdp4N",
	"yiFLs3TuFWmDihsJOSzTLF1CAoZTHZye1aeU+ecKg+N+GWGuv9nwHimGMWQ2RjGcXmSZ/xFaUb+qMyNm",
	"9y66GEPzVqTG4h60D5ew6YRA58quYUeSXuM/f5DK8FM7QuKLwieDgrCI34+wW9e1Lbf76FfMIdodWna8",
	"EcQr5zcfPYdtmByb/Ptn6GwDOcx2czhsj+2vY7jGhntk0j3AxLH6ZT2Ktz4f/fNhe/gZAAD//55wjadS",
	"BgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
